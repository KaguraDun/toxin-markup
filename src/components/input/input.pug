//- available properties:
  name: string;
  type: string;
  placeholder: string;
  value: string | number;
  style: default | dropdown;
  size: small | medium | large | full;
  button: none | arrow | expand-more | expand-less
  mask: date;
  readonly: boolean;
  required: boolean;
  openByButton: boolean;
  overflowEllipsis: boolean;
  onHover: boolean;
  data : string[];

mixin input(options)
  -
    const {
      name,
      type = 'text',
      placeholder = false,
      value = false,
      button = 'none',
      size = 'full',
      mask = false,
      readonly = false,
      required = false,
      openByButton = false,
      style = 'default',
      overflowEllipsis = false,
      onHover = false,
      data = [],
    } = options

    const dataAttributes = {};

    data.forEach((attribute) => {
      dataAttributes[attribute] = true;
    })

    const maskList = {
      date: {
        mask: "00.00.0000",
          pattern: "(0[1-9]|1[0-9]|2[0-9]|3[01]).(0[1-9]|1[012]).[0-9]{4}"
        }
      };

    const sizes = {
      small: 'input_size_small',
      medium: 'input_size_medium',
      large: 'input_size_large',
      full: 'input_size_full',
    }

    const styles = {
      default: 'input__input_style_default',
      dropdown: 'input__input_style_dropdown',
    }

    const inputClassNames = {
      'input__input': true,
      'js-input-input': true,
      [styles[style]]: true,
      'input__input_overflow_ellipsis': overflowEllipsis,
      'input__input_hovered': onHover,
    }

    const icons = {
      arrow: 'input__button-icon_style_arrow',
      'expand-more': 'input__button-icon_style_expand-more',
      'expand-less': 'input__button-icon_style_expand-less', 
    }

  .input(class=sizes[size])
    input(
      class=inputClassNames,
      name=name,
      type=type,
      value=value,
      placeholder=placeholder,
      data-mask=mask ? maskList[mask].mask : false,
      pattern=mask ? maskList[mask].pattern : false,
      title=mask ? "Введите дату в формате ДД.ММ.ГГГГ" : false,
      readonly=readonly,
      required=required
    )&attributes(dataAttributes)

    if button !== 'none'
      - const buttonType = openByButton ? "button" : "submit";

      button.input__button(type=buttonType, data-toggle=openByButton)
        span(class=`input__button-icon ${icons[button]}`)
